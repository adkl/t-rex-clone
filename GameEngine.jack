class GameEngine {
    field Array enemySequence;
    field int enemySequenceLength;

    method void initializeComponents() {
        do initializeEnemySequence();

        let enemySequenceLength = 33;

        let dinoXPositionOffset = 32 / 2 - 1; // half of horizontal axis
        let dinoNoJumpYPosition = 32 * 10;
        let dinoJumpYPosition = 32 * 11;
    }

    method void run() {
        do initializeComponents();
        var char key;
        var int currentEnemy;
        var int dinoPosition;

        var int gameStep;
        let gameStep = 0;

        while() {
            let currentEnemyIndex = 33 - Math.abs(gameStep - 33)
            let currentEnemy = enemySequence[currentEnemyIndex];

            if (jumped == true and jumpCountdown > 0) {
                let jumpCountdown = jumpCountdown - 1;
            }

            if (jumpCountdown = 0) {
                let jumped = false;
            }

            if (key = 131 & ~jumped) { // up arrow
                let jumped = true;
                let jumpCountdown = 4;
            }

            do printEnemySequence(gameStep);
            
            // prepare next stage
            do gameStep = gameStep + 1;
            if (gameStep = enemySequenceLength) {
                do gameStep = 0;
            }
            do Sys.wait(5);
        }
    }

    method initializeEnemySequence() {
        let enemySequence = Array.new(33);
        do enemySequence[0] = 0;
        do enemySequence[1] = 0;
        do enemySequence[2] = 0;
        do enemySequence[3] = 0;
        do enemySequence[4] = 1; // cactus
        do enemySequence[5] = 0;
        do enemySequence[6] = 0;
        do enemySequence[7] = 0;
        do enemySequence[8] = 0;
        do enemySequence[9] = 0;
        do enemySequence[10] = 0;
        do enemySequence[11] = 0;
        do enemySequence[12] = 0;
        do enemySequence[13] = 0;
        do enemySequence[14] = 1;
        do enemySequence[15] = 0;
        do enemySequence[16] = 0;
        do enemySequence[17] = 0;
        do enemySequence[18] = 0;
        do enemySequence[19] = 0;
        do enemySequence[20] = 0;
        do enemySequence[21] = 0;
        do enemySequence[22] = 0;
        do enemySequence[23] = 0;
        do enemySequence[24] = 1; // cactus
        do enemySequence[25] = 0;
        do enemySequence[26] = 0;
        do enemySequence[27] = 0;
        do enemySequence[28] = 0;
        do enemySequence[29] = 0;
        do enemySequence[30] = 0;
        do enemySequence[31] = 0;
        do enemySequence[32] = 0;
    }

    function void drawDino(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 32512);
        do Memory.poke(memAddress+32, -128);
        do Memory.poke(memAddress+64, -640);
        do Memory.poke(memAddress+96, -128);
        do Memory.poke(memAddress+128, 3968);
        do Memory.poke(memAddress+160, 16320);
        do Memory.poke(memAddress+192, 2016);
        do Memory.poke(memAddress+224, 16369);
        do Memory.poke(memAddress+256, 10235);
        do Memory.poke(memAddress+288, 2047);
        do Memory.poke(memAddress+320, 2047);
        do Memory.poke(memAddress+352, 1022);
        do Memory.poke(memAddress+384, 508);
        do Memory.poke(memAddress+416, 440);
        do Memory.poke(memAddress+448, 264);
        do Memory.poke(memAddress+480, 792);
        return;
    }

    // line is in 11th and 12th rows
    function void drawTerrain1(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 8256);
        do Memory.poke(memAddress+448, 6);
        do Memory.poke(memAddress+480, 544);
        return;
    }

    function void drawTerrain2(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 4224);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 2060);
        return;
    }

    function void drawTerrain3(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 12558);
        do Memory.poke(memAddress+448, 12288);
        do Memory.poke(memAddress+480, 384);
        return;
    }
}