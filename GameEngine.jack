class GameEngine {
    field Array enemySequence;
    field int enemySequenceLength;

    field int screenLength;
    field int screenHeight;
    field int bitmapBoxSize;

    field int dinoXPositionOffset;
    field int dinoNoJumpYPosition;
    field int dinoJumpYPosition;

    constructor GameEngine new() {
        return this;
    }

    method void initializeComponents() {
        do initializeEnemySequence();

        let screenHeight = 256;
        let screenLength = 512;
        let bitmapBoxSize = 16;

        let enemySequenceLength = 32;

        let dinoXPositionOffset = ((screenLength / bitmapBoxSize) / 2) - 1; // half of horizontal axis
        let dinoNoJumpYPosition = (screenHeight / bitmapBoxSize) * 11 * 32; // 10th row
        let dinoJumpYPosition = (screenHeight / bitmapBoxSize) * 10 * 32; // 11th row

        return;
    }

    method void run() {
        var char key;
        var int currentEnemy;
        var int dinoPosition;
        var boolean clash;
        var int gameStep;
        var int currentEnemyIndex;
        var boolean jumped;
        var int jumpCountdown;
        var boolean dinoJustLanded;
        var boolean dinoJustJumped;
        var int currentEnemyOffset;

        let clash = false;

        let gameStep = 0;

        do initializeComponents();
        do drawTerrain();

        while(~clash) {
            
            // if (gameStep < 16) {
            //     let currentEnemy = 0;
            // }
            // else {
            //     let currentEnemyOffset = gameStep - 16;
            //     if (currentEnemyOffset > 16) {
            //         let currentEnemyOffset = 16;
            //     }

            //     let currentEnemyIndex = MathUtils.getCircularIndex(enemySequenceLength, MathUtils.modulo(gameStep, 32), gameStep-currentEnemyOffset);
            //     let currentEnemy = enemySequence[currentEnemyIndex];
            // }

            if (jumped & (jumpCountdown > 0)) {
                let jumpCountdown = jumpCountdown - 1;
            }

            if (jumpCountdown = 0) {
                let jumped = false;
                let dinoJustLanded = true;
            }

            let key = Keyboard.keyPressed();
            if ((key = 131) & ~jumped) { // up arrow
                let jumped = true;
                let jumpCountdown = 4;
                let dinoJustJumped = true;
            }

            if (jumped) {
                let dinoPosition = dinoJumpYPosition + dinoXPositionOffset;
            }
            else {
                let dinoPosition = dinoNoJumpYPosition + dinoXPositionOffset;
            }

            if (dinoJustLanded) {
                do Graphics.drawBlank(dinoJumpYPosition + dinoXPositionOffset);
            }

            if (dinoJustJumped) {
                do Graphics.drawBlank(dinoNoJumpYPosition + dinoXPositionOffset);
            }

            do Graphics.drawDino(dinoPosition);
            let clash = processEnemySequence(gameStep, dinoPosition);

            // prepare next stage
            let dinoJustLanded = false;
            let dinoJustJumped = false;

            let gameStep = gameStep + 1;
            do Sys.wait(300);
        }
        return;
    }

    method void initializeEnemySequence() {
        let enemySequence = Array.new(32);
        let enemySequence[0] = 1; // cactus
        let enemySequence[1] = 0;
        let enemySequence[2] = 0;
        let enemySequence[3] = 0;
        let enemySequence[4] = 0;
        let enemySequence[5] = 0;
        let enemySequence[6] = 0;
        let enemySequence[7] = 1; // cactus
        let enemySequence[8] = 0;
        let enemySequence[9] = 0;
        let enemySequence[10] = 0;
        let enemySequence[11] = 0;
        let enemySequence[12] = 0;
        let enemySequence[13] = 0;
        let enemySequence[14] = 1; // cactus
        let enemySequence[15] = 0;
        let enemySequence[16] = 0;
        let enemySequence[17] = 0;
        let enemySequence[18] = 0;
        let enemySequence[19] = 0;
        let enemySequence[20] = 0;
        let enemySequence[21] = 0;
        let enemySequence[22] = 0;
        let enemySequence[23] = 0;
        let enemySequence[24] = 1; // cactus
        let enemySequence[25] = 0;
        let enemySequence[26] = 0;
        let enemySequence[27] = 0;
        let enemySequence[28] = 0;
        let enemySequence[29] = 0;
        let enemySequence[30] = 0;
        let enemySequence[31] = 0;
        return;
    }

    method boolean processEnemySequence(int gameStep, int dinoPosition) {
        // Prints the current enemy sequence and detect the
        var int enemyIndex;
        var int i;
        var int enemyPosition;
        var int enemyValue;
        var int numOfVisibleEnemies;
        var boolean clash;

        let i = 0;
        let clash = false;

        if (gameStep > 32) {
            let numOfVisibleEnemies = 32;
        }
        else {
            let numOfVisibleEnemies = gameStep;
        }

        while((i < numOfVisibleEnemies) & ~clash) {
            let enemyIndex = MathUtils.getCircularIndex(enemySequenceLength, MathUtils.modulo(gameStep, enemySequenceLength), -i);
            let enemyPosition = (11 * 32 *  (screenHeight / bitmapBoxSize)) + ((screenLength / bitmapBoxSize) -1 - i);

            let enemyValue = enemySequence[enemyIndex];

            if (enemyValue = 1) {
                do Graphics.drawCactus(enemyPosition);
            }

            if ((enemyValue = 0) & ~(enemyPosition = dinoPosition)) {
                do Graphics.drawBlank(enemyPosition);
            }

            if ((enemyValue = 1) & (enemyPosition = dinoPosition)) {
                let clash = true;
            }

            let i = i + 1;
        }

        return clash;
    }

    method void drawTerrain() {
        var int position;
        var int i;

        let position = 12 * (screenHeight / bitmapBoxSize) * 32;

        let i = 0;
        while(i < (screenLength / bitmapBoxSize)) {
            do Graphics.drawTerrain1(position);
            let position = position + 1;

            do Graphics.drawTerrain2(position);
            let position = position + 1;

            do Graphics.drawTerrain3(position);
            let position = position + 1;

            let i = i + 1;
        }

        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}