class GameEngine {
    field Array enemySequence;
    field int enemySequenceLength;

    field int screenLength;
    field int screenHeight;
    field int bitmapBoxSize;

    method void initializeComponents() {
        do initializeEnemySequence();

        let screenHeight = 256;
        let screenLength = 512;
        let bitmapBoxSize = 16;

        let enemySequenceLength = 33;

        let dinoXPositionOffset = ((screenLength / bitmapBoxSize) / 2) - 1; // half of horizontal axis
        let dinoNoJumpYPosition = (screenHeight / bitmapBoxSize) * 10; // 10th row
        let dinoJumpYPosition = (screenHeight / bitmapBoxSize) * 11; // 11th row
    }

    method void run() {
        do initializeComponents();
        var char key;
        var int currentEnemy;
        var int dinoPosition;

        var int gameStep;
        let gameStep = 0;

        do drawTerrain();

        while() {
            let currentEnemyIndex = MathUtils.getCircularIndex(enemySequenceLength, gameStep, dinoXPositionOffset + 1)
            let currentEnemy = enemySequence[currentEnemyIndex];

            if (jumped == true and jumpCountdown > 0) {
                let jumpCountdown = jumpCountdown - 1;
            }

            if (jumpCountdown = 0) {
                let jumped = false;
            }

            if (key = 131 & ~jumped) { // up arrow
                let jumped = true;
                let jumpCountdown = 4;
            }

            if (jumped) {
                let dinoPosition = dinoJumpYPosition + (dinoXPositionOffset * 32);
            }
            else {
                let dinoPosition = dinoNoJumpYPosition + (dinoXPositionOffset * 32);
            }

            do drawDino(dinoPosition);
            do printEnemySequence(gameStep);
            
            // prepare next stage
            do gameStep = gameStep + 1;
            if (gameStep = enemySequenceLength) {
                do gameStep = 0;
            }
            do Sys.wait(5);
        }
    }

    method void initializeEnemySequence() {
        let enemySequence = Array.new(33);
        let enemySequence[0] = 0;
        let enemySequence[1] = 0;
        let enemySequence[2] = 0;
        let enemySequence[3] = 0;
        let enemySequence[4] = 1; // cactus
        let enemySequence[5] = 0;
        let enemySequence[6] = 0;
        let enemySequence[7] = 0;
        let enemySequence[8] = 0;
        let enemySequence[9] = 0;
        let enemySequence[10] = 0;
        let enemySequence[11] = 0;
        let enemySequence[12] = 0;
        let enemySequence[13] = 0;
        let enemySequence[14] = 1;
        let enemySequence[15] = 0;
        let enemySequence[16] = 0;
        let enemySequence[17] = 0;
        let enemySequence[18] = 0;
        let enemySequence[19] = 0;
        let enemySequence[20] = 0;
        let enemySequence[21] = 0;
        let enemySequence[22] = 0;
        let enemySequence[23] = 0;
        let enemySequence[24] = 1; // cactus
        let enemySequence[25] = 0;
        let enemySequence[26] = 0;
        let enemySequence[27] = 0;
        let enemySequence[28] = 0;
        let enemySequence[29] = 0;
        let enemySequence[30] = 0;
        let enemySequence[31] = 0;
        let enemySequence[32] = 0;
    }

    method void drawDino(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 32512);
        do Memory.poke(memAddress+32, -128);
        do Memory.poke(memAddress+64, -640);
        do Memory.poke(memAddress+96, -128);
        do Memory.poke(memAddress+128, 3968);
        do Memory.poke(memAddress+160, 16320);
        do Memory.poke(memAddress+192, 2016);
        do Memory.poke(memAddress+224, 16369);
        do Memory.poke(memAddress+256, 10235);
        do Memory.poke(memAddress+288, 2047);
        do Memory.poke(memAddress+320, 2047);
        do Memory.poke(memAddress+352, 1022);
        do Memory.poke(memAddress+384, 508);
        do Memory.poke(memAddress+416, 440);
        do Memory.poke(memAddress+448, 264);
        do Memory.poke(memAddress+480, 792);
        return;
    }

    method void drawTerrain() {
        var int position;
        let position = 12 * (screenHeight / bitmapBoxSize);

        var int i;
        let i = 0;
        while(i < (screenLength / bitmapBoxSize)) {
            do drawTerrain1(position);
            let position = position + 32;

            do drawTerrain2(position);
            let position = position + 32;

            do drawTerrain3(position);
            let position = position + 32;

            let i = i + 1;
        }
    }

    // line is in 11th and 12th rows
    method void drawTerrain1(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 8256);
        do Memory.poke(memAddress+448, 6);
        do Memory.poke(memAddress+480, 544);
        return;
    }

    method void drawTerrain2(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 4224);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 2060);
        return;
    }

    method void drawTerrain3(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, -1);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 12558);
        do Memory.poke(memAddress+448, 12288);
        do Memory.poke(memAddress+480, 384);
        return;
    }
}